正则note

非打印字符

\cx 匹配由X指明的控制字符。
\f  匹配一个换页符。
\n  匹配一个换行符。
\r  匹配一个回车符。
\s  匹配任何的空白字符(空格，换页符，制表符)。
\S  匹配任何非空白字符(等价于 [^ \f\n\r\t\v])。
\t 	匹配一个制表符。
\v  匹配一个垂直制表符。
\b  匹配一个字边界，即字与空格间的位置
\B  非字边界匹配
\w	匹配字母或数字或下划线
\d	匹配数字

特殊字符

^	匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。
$	匹配输入字符串的结尾位置。
*	匹配前面的子表达式零次或多次
+	匹配前面的子表达式一次或多次
?	匹配前面的子表达式零次或一次，或指明一个非贪婪限定符
.	匹配除换行符 \n 之外的任何单字符
|	指明两项之间的一个选择
()	标记一个子表达式的开始和结束位置
[	标记一个中括号表达式的开始
{	标记限定符表达式的开始

限定字符

* ==> {0,}	零次或多次
+ ==> {1,}	一次或多次
? ==> {0,1}	零次或一次
{n}	n 是一个非负整数 ==> 'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o
{n,}	n 是一个非负整数。至少匹配n 次。
{n,m}	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。

注意：*、+和?限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。

定位符

^	匹配输入字符串开始的位置。
$	匹配输入字符串结尾的位置。
\b  匹配一个字边界，即字与空格间的位置。
\B  非字边界匹配。

注意： 不能将限定符与定位点一起使用。

选择

用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，是相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。

反向引用

对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 '\n' 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。




例子：
/[1-9][0-9]*/ 两个数字出现0或者多次
/[1-9][0-9]?/ ==> /[1-9][0-9]{0,1}/	第一个数为1~9，第二个数为0~9，一共出现0或一次。
/^[1-9][0-9]?/	以第一个数为1~9，第二个数为0~9的两个数开头的数字。
/^[1-9][0-9]?$/	一行中，只有两个数字(开头与结尾都为中括号中的数字)。
/^[a-z]\w*[0-9]/	以小写字母开头，已数字结尾，中间为任意字符
^[[:alpha:]]{3}$	所有的3个字母的单词
^a{4}$				aaaa
^a{2,4}$			aa,aaa或aaaa
^a{2,}				如：aardvark和aaab，但apple不行
a{2,}				如：baad和aaa，但Nantucket不行
\t{2}				两个制表符
.{2}				所有的两个字符
^[a-zA-Z0-9_]{1,}$ 	//所有包含一个以上的字母、数字或下划线的字符串 
^[1-9][0-9]*$ 		//所有的正整数 
^\-{0,1}[0-9]{1,}$ 	//所有的整数 
^[-]?[0-9]+\.?[0-9]+$ 	//所有的浮点数
/^(Chapter|Section) [1-9][0-9]{0,1}$/	 //Chapter 1 或 Section 3
/Windows(?=95 |98 |NT )/ 	正向预测先行使用 ?= 指定 ,匹配 Windows 95、Windows 98 和 Windows NT：



例子：
<H1>Chapter 1 – Introduction to Regular Expressions</H1>

/<.*>/	==>	<H1>Chapter 1 – Introduction to Regular Expressions</H1>
非贪婪模式
/<.*?>/	==>	<H1>,</H1>

例子：
Chapter
/\bCha/ ==> Cha
/ter\b/ ==>	ter
/\Bapt/ ==> apt

例子：
Is is the cost of of gasoline going up up?

/\b([a-z]+) \1\b/gi ==> Is is,of of,up up \1 便是上一个缓冲区 Is是is的上一个缓冲区

例子：
http://www.runoob.com:80/html/html-tutorial.html

/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/ ==> http://www.runoob.com:80/html/html-tutorial.html

(\w+):\/\/  ==>	http://
([^/:]+)	==> www.runoob.com
(:\d*)?		==>	:80
([^# ]*)	==>	/html/html-tutorial.html
