1、什么是闭包
	function a(){
		var i = 0;
		console.log(i);
		function b(){
			alert(++i);
		}

		return b;
	}

	var c = a();
	c();

此段代码有两个特点:
	1、函数b嵌套在函数a里面；
	2、函数a返回函数b。
	这样在执行完var c=a()后，变量c实际上是指向了函数b，再执行c()后就会弹出一个窗口显示i的值(第一次为1)
。这段代码其实就创建了一个闭包，为什么？因为函数a外的变量c引用了函数a内的函数b，就是说:

	注意：当函数a的内部函数b被函数a外的一个变量引用的时候，就创建了一个闭包！！


2、闭包有什么作用？

	1、保护函数内的变量安全。 以最开始的例子为例，函数a中i只有函数b才能访问，而无法通过其他途径访问到，因此保护了i的安全性。

	局部变量在函数结束后会被释放掉，对应的堆栈空间也不存在（就是说函数a执行完成之后，a中的i被释放）

	2、在内存中会维持一个变量。
	由于闭包，内存当中会保存一个函数a中的i，既函数c访问的i，因此，每次c()，i都会给自己加一。


注：简而言之，闭包的作用就是在a执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回a所占用的资源 ，因为a的内部函数b的 执行需要依赖a中的变量。这是对闭包作用的非常直白的描述，不专业也不严谨，但大概意思就是这样，理解闭包需要循序渐进的过程！


3、闭包内的微观世界


　　如 果要更加深入的了解闭包以及函数a和嵌套函数b的关系，我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。以函数a从定义到执行的过程为例阐述这几个概念。
　　1、当定义函数a的时候，js解释器会将函数a的作用域链(scope chain)设置为定义a时a所在的“环境”，如果a是一个全局函数，则scope chain中只有window对象。
　　2、当函数a执行的时候，a会进入相应的执行环境(excution context)。
　　3、在创建执行环境的过程中，首先会为a添加一个scope属性，即a的作用域，其值就为第1步中的scope chain。即a.scope=a的作用域链。
　　4、然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a 的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。
　　5、下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。
　　6、最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。
 
　　到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。
　　当函数b执行的时候亦会像以上步骤一样。因此，执行时b的作用域链包含了3个对象：b的活动对象、a的活动对象和window对象
　　当在函数b中访问一个变量的时候，搜索顺序是先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索函数a的活动对象，依 次查找，直到找到为止。如果整个作用域链上都无法找到，则返回undefined。如果函数b存在prototype原型对象，则在查找完自身的活动对象 后先查找自身的原型对象，再继续查找。这就是Javascript中的变量查找机制。

4、Javascript的垃圾回收机制
　　在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。 因为函数a被b引用，b又被a外的c引用，这就是为什么函数a执行后不会被回收的原因。


来源：http://blog.csdn.net/hitman9099/article/details/3854171



//==第二部分闭包讲解==//

1、如何从外部读取局部变量？ 
	出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。

	那就是在函数的内部，再定义一个函数。

	function f1(){  
  
　　　　var n=999;  
  
　　　　function f2(){  
　　　　　　alert(n); // 999  
　　　　}  
　　}


	在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1 就是不可见的。这就是Javascript语言特有的"链式作用域"结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。
	既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！


	function f1(){  
	　var n=999;  
	  
	　　　　function f2(){  
	　　　　　　alert(n);  
	　　　　}  
	　　　　return f2;  
	　　}  
	　　var result=f1();  
	　　result(); // 999

2、闭包的概念

	上一节代码中的f2函数，就是闭包。
各种专业文献上的"闭包"（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。
由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成"定义在一个函数内部的函数"。
所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。


3、闭包的用途 

闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量 ，另一个就是让这些变量的值始终保持在内存中 。
怎么来理解这句话呢？请看下面的代码。

function f1(){  
　　　　var n=999;  
  
　　　　nAdd=function(){n+=1}  
  
　　　　function f2(){  
　　　　　　alert(n);  
　　　　}  
　　　　return f2;  
}  
  
　　var result=f1();  
　　result(); // 999  
　　nAdd();  
　　result(); // 1000  

在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。
为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。
这段代码中另一个值得注意的地方，就是"nAdd=function(){n+=1}"这一行，首先在nAdd前面没有使用var关键字，因此 nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。


4、使用闭包的注意点

1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。

2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。


5、思考题 

var name = "The Window";  
  
　　var object = {  
　　　　name : "My Object",  
  
　　　　getNameFunc : function(){  
　　　　　　return function(){  
　　　　　　　　return this.name;  
　　　　　　};  
　　　　}  
　　};  

　　alert(object.getNameFunc()()); 
===========================================================
  
 
var name = "The Window";  
  
　　var object = {  
　　　　name : "My Object",  
  
　　　　getNameFunc : function(){  
　　　　　　var that = this;  
　　　　　　return function(){  
　　　　　　　　return that.name;  
　　　　　　};  
　　　　}  
　　};  
  
　　alert(object.getNameFunc()());

闭包this的详细例子：

var w = 100;  
function f1() {  
    //var w=101;  
    //this.w=102;  
    function f2() {  
        document.write(this.w);  
    }  
    return f2;  
}  
f1()();  
//输出：100  

============================================================


var w=100;  
function f1(){  
var w=101;  
//this.w=102;  
function f2(){  
document.write(this.w);  
}  
return f2;  
}  
f1()();  
//输出：100  


============================================================

var w = 100;  
function f1() {  
    w = 101;  
    //this.w=102;  
    function f2() {  
        document.write(this.w);  
    }  
    return f2;  
}  
f1()();  
//输出：101  


===========================================================


var w = 100;  
function f1() {  
    //var w=101;  
    this.w = 102;  
    function f2() {  
        document.write(this.w);  
    }  
    return f2;  
}  
f1()();  
//输出：102  


几个易犯错的闭包例子：

1、
var person = function(){    
     //变量作用域为函数内部，外部无法访问    
     var name = "default";       
        
     return {    
        getName : function(){    
            return name;    
        },    
        setName : function(newName){    
            name = newName;    
        }    
     }    
 }();    
  
alert(person);    // [Object Object]  
    //带()表示执行函数function，返回的是一个对象  
alert(person.name);     //undefined    
alert(person.getName());  //default  
    //对象中的getName()方法  
  
person.setName("abruzzi");    
alert(person.getName());   //abruzzi  


=====================================================================


2、不带()时，创建一个person函数的对象，也可访问getName()

var person = function(){    
    
    var name = "default";       
       
    return {    
       getName : function(){    
           return name;    
       },    
       setName : function(newName){    
           name = newName;    
       }    
    }    
};    
    alert(person);   //person 等号后面的值  
    var per = new person()   // 也可var per = person();  
 alert(per.name);     //undefined    
 alert(per.getName()); //default  


 =====================================================================

 3、注意//的区别


 var person2 = function(){    
  
     var name = "default";       
               
        this.getName = function(){  //  
            return name;    
        };  //  
        this.setName = function(newName){    
            name = newName;    
        }         
 };  
         var per = new person2()    //此处必须使用new person2()  
     alert(per.name);      //undefined    
     alert(per.getName());  //default  